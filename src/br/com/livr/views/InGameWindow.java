/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.livr.views;

import br.com.livr.BatedorDePenalti;
import br.com.livr.Equipe;
import br.com.livr.Goleiro;
import br.com.livr.statics.Sessao;
import static br.com.livr.statics.Sessao.getEquipeAdversaria;
import static br.com.livr.statics.Sessao.getEquipePlayer;
import static br.com.livr.statics.Sessao.getGoleiroEquipePlayer;
import static br.com.livr.statics.Sessao.getJogadoresPorTime;
import static br.com.livr.statics.Sessao.getTecnico;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.Timer;

/**
 *
 * @author victor
 */
public class InGameWindow extends javax.swing.JFrame {

    private ArrayList<String> relatorio = new ArrayList<>();
    private int numeroBatedorIA = 0;
    private int penaltisBatidosPelaIA = 0, penaltisBatidosPeloPlayer = 0, penaltisBatidos = 0;
    private final int totalCobrancas = getJogadoresPorTime();
    private List<Integer> indicesSelecionados = new ArrayList<>();
    private Notificacao notificacao = new Notificacao();
    private boolean haVencedor = false;

    /**
     * Creates new form InGameWindow
     */
    public InGameWindow() {
        initComponents();
        initListaJogadores();
        super.setLocationRelativeTo(null);
        super.setExtendedState(MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlContainer = new javax.swing.JPanel();
        lblEscolherBatedor = new javax.swing.JLabel();
        scrollPaneBatedores = new javax.swing.JScrollPane();
        listJogadoresTimePlayer = new javax.swing.JList<>();
        btnSuaVez = new javax.swing.JButton();
        btnReagir = new javax.swing.JButton();
        btnTirarParOuImpar = new javax.swing.JButton();
        lblAcoes = new javax.swing.JLabel();
        lblTituloPainelAcoes = new javax.swing.JLabel();
        lblTituloRelatorio = new javax.swing.JLabel();
        lblTituloPlacar = new javax.swing.JLabel();
        scrollPaneRelatorio = new javax.swing.JScrollPane();
        listRelatorio = new javax.swing.JList<>();
        lblPlacarTimePlayer = new javax.swing.JLabel();
        lblPlacarTimeIA = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Playing...");
        setMinimumSize(new java.awt.Dimension(734, 523));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        pnlContainer.setBackground(new java.awt.Color(255, 255, 255));
        pnlContainer.setLayout(new java.awt.GridBagLayout());

        lblEscolherBatedor.setBackground(new java.awt.Color(255, 255, 255));
        lblEscolherBatedor.setForeground(new java.awt.Color(255, 102, 102));
        lblEscolherBatedor.setText("Escolher Batedor da Vez");
        lblEscolherBatedor.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(45, 0, 0, 0);
        pnlContainer.add(lblEscolherBatedor, gridBagConstraints);

        scrollPaneBatedores.setBackground(new java.awt.Color(255, 255, 255));
        scrollPaneBatedores.setBorder(null);

        listJogadoresTimePlayer.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        listJogadoresTimePlayer.setForeground(new java.awt.Color(255, 102, 102));
        listJogadoresTimePlayer.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listJogadoresTimePlayer.setFocusable(false);
        listJogadoresTimePlayer.setSelectionBackground(new java.awt.Color(255, 51, 102));
        listJogadoresTimePlayer.setSelectionForeground(new java.awt.Color(255, 255, 255));
        scrollPaneBatedores.setViewportView(listJogadoresTimePlayer);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 183;
        gridBagConstraints.ipady = 170;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        pnlContainer.add(scrollPaneBatedores, gridBagConstraints);

        btnSuaVez.setBackground(new java.awt.Color(255, 102, 102));
        btnSuaVez.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        btnSuaVez.setForeground(new java.awt.Color(255, 255, 255));
        btnSuaVez.setText("SUA VEZ!");
        btnSuaVez.setBorderPainted(false);
        btnSuaVez.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnSuaVez.setFocusPainted(false);
        btnSuaVez.setFocusable(false);
        btnSuaVez.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaVezActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 120;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(18, 0, 0, 0);
        pnlContainer.add(btnSuaVez, gridBagConstraints);

        btnReagir.setBackground(new java.awt.Color(255, 102, 102));
        btnReagir.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        btnReagir.setForeground(new java.awt.Color(255, 255, 255));
        btnReagir.setText("REAGIR");
        btnReagir.setBorderPainted(false);
        btnReagir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnReagir.setFocusPainted(false);
        btnReagir.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipady = 35;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 18, 0, 0);
        pnlContainer.add(btnReagir, gridBagConstraints);

        btnTirarParOuImpar.setBackground(new java.awt.Color(255, 102, 102));
        btnTirarParOuImpar.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        btnTirarParOuImpar.setForeground(new java.awt.Color(255, 255, 255));
        btnTirarParOuImpar.setText("TIRAR PAR OU IMPAR");
        btnTirarParOuImpar.setBorderPainted(false);
        btnTirarParOuImpar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnTirarParOuImpar.setFocusPainted(false);
        btnTirarParOuImpar.setFocusable(false);
        btnTirarParOuImpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTirarParOuImparActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipady = 36;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 25, 0, 0);
        pnlContainer.add(btnTirarParOuImpar, gridBagConstraints);

        lblAcoes.setBackground(new java.awt.Color(255, 255, 255));
        lblAcoes.setForeground(new java.awt.Color(255, 102, 102));
        lblAcoes.setText("Ações");
        lblAcoes.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(45, 25, 0, 0);
        pnlContainer.add(lblAcoes, gridBagConstraints);

        lblTituloPainelAcoes.setBackground(new java.awt.Color(255, 255, 255));
        lblTituloPainelAcoes.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        lblTituloPainelAcoes.setForeground(new java.awt.Color(255, 102, 102));
        lblTituloPainelAcoes.setText("Painel de Ações do Treinador");
        lblTituloPainelAcoes.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 0);
        pnlContainer.add(lblTituloPainelAcoes, gridBagConstraints);

        lblTituloRelatorio.setBackground(new java.awt.Color(255, 255, 255));
        lblTituloRelatorio.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        lblTituloRelatorio.setForeground(new java.awt.Color(255, 102, 102));
        lblTituloRelatorio.setText("Relatório");
        lblTituloRelatorio.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 25, 0, 0);
        pnlContainer.add(lblTituloRelatorio, gridBagConstraints);

        lblTituloPlacar.setBackground(new java.awt.Color(255, 255, 255));
        lblTituloPlacar.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        lblTituloPlacar.setForeground(new java.awt.Color(255, 102, 102));
        lblTituloPlacar.setText("PLACAR");
        lblTituloPlacar.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(29, 56, 0, 0);
        pnlContainer.add(lblTituloPlacar, gridBagConstraints);

        scrollPaneRelatorio.setBorder(null);

        listRelatorio.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        listRelatorio.setForeground(new java.awt.Color(255, 102, 102));
        listRelatorio.setFocusable(false);
        listRelatorio.setSelectionBackground(new java.awt.Color(255, 51, 102));
        listRelatorio.setSelectionForeground(new java.awt.Color(255, 255, 255));
        scrollPaneRelatorio.setViewportView(listRelatorio);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 404;
        gridBagConstraints.ipady = 97;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 25, 0, 0);
        pnlContainer.add(scrollPaneRelatorio, gridBagConstraints);

        lblPlacarTimePlayer.setBackground(new java.awt.Color(255, 255, 255));
        lblPlacarTimePlayer.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        lblPlacarTimePlayer.setForeground(new java.awt.Color(255, 102, 102));
        lblPlacarTimePlayer.setText("0");
        lblPlacarTimePlayer.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 4, 0, 0);
        pnlContainer.add(lblPlacarTimePlayer, gridBagConstraints);

        lblPlacarTimeIA.setBackground(new java.awt.Color(255, 255, 255));
        lblPlacarTimeIA.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        lblPlacarTimeIA.setForeground(new java.awt.Color(255, 102, 102));
        lblPlacarTimeIA.setText("0");
        lblPlacarTimeIA.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(18, 56, 0, 0);
        pnlContainer.add(lblPlacarTimeIA, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.2;
        getContentPane().add(pnlContainer, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSuaVezActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaVezActionPerformed
        // TODO add your handling code here:
        if (!btnTirarParOuImpar.isEnabled()) {
            int selecionado = getListJogadoresTimePlayer().getSelectedIndex();
            if (!jaFoi(selecionado)) {
                getIndicesSelecionados().add(selecionado);
                BatedorDePenalti bp = getTecnico().escolherBatedor(selecionado);
                gerarRelatorio(bp, getEquipePlayer());
//                setPenaltisBatidosPeloPlayer(getPenaltisBatidosPeloPlayer() + 1);
                btnSuaVez.setEnabled(false);

                verificarPlacar(getEquipePlayer());

                if (!haVencedor) {
                    System.out.println("NÃO HÁ VENCEDOR");

                    runIA();
                }

            } else {
                JOptionPane.showMessageDialog(null, "Escolha OUtro");
            }
        } else {
            btnTirarParOuImpar.doClick();
        }
    }//GEN-LAST:event_btnSuaVezActionPerformed

    private void btnTirarParOuImparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTirarParOuImparActionPerformed
        // TODO add your handling code here:
        ParOuImparDialog parOuImparDialog = new ParOuImparDialog(this, true);
        parOuImparDialog.setVisible(true);
        if (parOuImparDialog.isJogou()) {
            btnTirarParOuImpar.setText(parOuImparDialog.getQuemComeca().toUpperCase());
            btnTirarParOuImpar.setEnabled(false);
            verificarQuemComeca(parOuImparDialog.isVenceuParOuImpar());
        }
    }//GEN-LAST:event_btnTirarParOuImparActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReagir;
    private javax.swing.JButton btnSuaVez;
    private javax.swing.JButton btnTirarParOuImpar;
    private javax.swing.JLabel lblAcoes;
    private javax.swing.JLabel lblEscolherBatedor;
    private static javax.swing.JLabel lblPlacarTimeIA;
    private static javax.swing.JLabel lblPlacarTimePlayer;
    private javax.swing.JLabel lblTituloPainelAcoes;
    private javax.swing.JLabel lblTituloPlacar;
    private javax.swing.JLabel lblTituloRelatorio;
    private javax.swing.JList<String> listJogadoresTimePlayer;
    private javax.swing.JList<String> listRelatorio;
    private javax.swing.JPanel pnlContainer;
    private javax.swing.JScrollPane scrollPaneBatedores;
    private javax.swing.JScrollPane scrollPaneRelatorio;
    // End of variables declaration//GEN-END:variables

    public void initListaJogadores() {
        List<BatedorDePenalti> lst = getEquipePlayer().getJogadores();
        List<String> nomes = new ArrayList<>();
        lst.forEach((bp) -> {
            nomes.add(bp.getNomeJogador());
        });

        getListJogadoresTimePlayer().setListData(nomes.toArray(new String[nomes.size()]));
    }

    public void atualizarERolar(JScrollPane scrollPaneRelatorio, JList<String> listRelatorio) {
        int tamanhoListaRelatorios = getRelatorio().size();
        listRelatorio.setListData(getRelatorio().toArray(new String[tamanhoListaRelatorios]));
        listRelatorio.setSelectedIndex(tamanhoListaRelatorios - 1);
        int maxValue = scrollPaneRelatorio.getVerticalScrollBar().getMaximum();
        scrollPaneRelatorio.getViewport().setViewPosition(new Point(0, maxValue));
    }

    public ArrayList<String> getRelatorio() {
        return relatorio;
    }

    public javax.swing.JScrollPane getScrollPaneRelatorio() {
        return scrollPaneRelatorio;
    }

    public void setRelatorio(ArrayList<String> relatorio) {
        this.relatorio = relatorio;
    }

    public void setScrollPaneRelatorio(javax.swing.JScrollPane scrollPaneRelatorio) {
        this.scrollPaneRelatorio = scrollPaneRelatorio;
    }

    public javax.swing.JList<String> getListJogadoresTimePlayer() {
        return listJogadoresTimePlayer;
    }

    public javax.swing.JList<String> getListRelatorio() {
        return listRelatorio;
    }

    private void verificarQuemComeca(boolean venceuParOuImpar) {
        btnSuaVez.setEnabled(venceuParOuImpar);//Se venceu, true. Se não, false
        if (!venceuParOuImpar) {
            runIA();
        }
    }

    public int getNumeroBatedorIA() {
        return numeroBatedorIA;
    }

    public void setNumeroBatedorIA(int numeroBatedorIA) {
        this.numeroBatedorIA = numeroBatedorIA;
    }

    private void gerarRelatorio(BatedorDePenalti bp, Equipe equipeDoBatedor) {
//        GeradorDeRelatorio gdr = new GeradorDeRelatorio(this, getScrollPaneRelatorio(), getListRelatorio(), getRelatorio(), bp, equipeDoBatedor);
//        Thread t = new Thread(gdr);
//        t.start();
//        getRelatorio().add(bp.getNomeJogador() + " posicionou a bola na marca do pênalti");
//        atualizarERolar(getScrollPaneRelatorio(), getListRelatorio());

//        try {
//            Thread.sleep(0 * 1000);
//        } catch (InterruptedException ex) {
//
//        }
//        Timer t = new Timer(3000, (ActionEvent e) -> {
            getRelatorio().add(bp.baterPenalti(equipeDoBatedor));
            atualizarERolar(getScrollPaneRelatorio(), getListRelatorio());

            boolean foiGol = BatedorDePenalti.isMarcouGol();
            if (foiGol) {
                alterarPlacarDe(equipeDoBatedor);
            }

            if (Sessao.getTecnico().getEquipe().equals(equipeDoBatedor)) {
                setPenaltisBatidosPeloPlayer(getPenaltisBatidosPeloPlayer() + 1);
                if (getPenaltisBatidosPeloPlayer() == getTotalCobrancas()) {
                    initListaJogadores();
                }
                btnSuaVez.setEnabled(false);
            } else {
                setPenaltisBatidosPelaIA(getPenaltisBatidosPelaIA() + 1);
                btnSuaVez.setEnabled(true);
            }
//        });
        
//        t.setRepeats(false);
//        t.start();

    }

    public void alterarPlacarDe(Equipe equipe) {
        if (equipe.getGoleiro().equals(getGoleiroEquipePlayer())) {
            lblPlacarTimePlayer.setText("" + (Integer.parseInt(lblPlacarTimePlayer.getText()) + 1));
        } else {
            lblPlacarTimeIA.setText("" + (Integer.parseInt(lblPlacarTimeIA.getText()) + 1));
        }
    }

    public int getPenaltisBatidosPelaIA() {
        return penaltisBatidosPelaIA;
    }

    public int getPenaltisBatidosPeloPlayer() {
        return penaltisBatidosPeloPlayer;
    }

    public void setPenaltisBatidosPelaIA(int penaltisBatidosPelaIA) {
        this.penaltisBatidosPelaIA = penaltisBatidosPelaIA;
    }

    public void setPenaltisBatidosPeloPlayer(int penaltisBatidosPeloPlayer) {
        this.penaltisBatidosPeloPlayer = penaltisBatidosPeloPlayer;
    }

    private boolean verificarSeTodosJaBateram(int jogadoresPorTime, int penaltisBatidos) {

        return (penaltisBatidos % (jogadoresPorTime * 2) == 0);
    }

    private void verificarPlacar(Equipe ultimaEquipeQueBateu) {
        int pBatidos = getPenaltisBatidosPelaIA() + getPenaltisBatidosPeloPlayer();
        boolean todosBateram = verificarSeTodosJaBateram(getJogadoresPorTime(), pBatidos);
        if ((todosBateram) && (pBatidos >= (getTotalCobrancas() * 2))) {
            int placarIA = Integer.parseInt(lblPlacarTimeIA.getText());
            int placarPlayer = Integer.parseInt(lblPlacarTimePlayer.getText());
            if ((placarIA != placarPlayer)) {

                if (placarIA > placarPlayer) {
                    getNotificacao().exibirNotificacao(getEquipeAdversaria(), placarIA, placarPlayer);
                } else {
                    getNotificacao().exibirNotificacao(getEquipePlayer(), placarPlayer, placarIA);
                }
                haVencedor = true;

                btnSuaVez.setEnabled(false);
            } else {
                naoHaVencedor(ultimaEquipeQueBateu);
            }
        } else {
            naoHaVencedor(ultimaEquipeQueBateu);
        }
    }

    public int getTotalCobrancas() {
        return totalCobrancas;
    }

    public List<Integer> getIndicesSelecionados() {
        return indicesSelecionados;
    }

    public void setIndicesSelecionados(List<Integer> indicesSelecionados) {
        this.indicesSelecionados = indicesSelecionados;
    }

    public Notificacao getNotificacao() {
        return notificacao;
    }

    public void setNotificacao(Notificacao notificacao) {
        this.notificacao = notificacao;
    }

//    private int correcaoDoValor(int selecionado) {
//        for(Integer is : indicesSelecionados) {
//            if(is.intValue() == selecionado) selecionado++;
//            if(selecionado > 4) selecionado = 0;
//        }
//        
//        return selecionado;
//    }
    private boolean jaFoi(int selecionado) {
        List<Integer> is = getIndicesSelecionados();
        if (is.size() == 4) {
            getIndicesSelecionados().clear();
        }

        for (int i = 0; i < is.size(); i++) {
            if (is.get(i) == selecionado) {
                return true;
            }
        }

        return false;
    }

    public static Goleiro verificarEquipeDoGoleiro(Equipe equipeDoBatedor) {
        if (equipeDoBatedor.getGoleiro().equals(getGoleiroEquipePlayer())) { //Se bp e gk forem do mesmo time
            return getEquipeAdversaria().getGoleiro();
        } else {
            return getEquipePlayer().getGoleiro();
        }
    }

    private void runIA() {
        Timer t = new Timer(5000, (ActionEvent e) -> {
            int numeroBatedorPenaltiIA = getNumeroBatedorIA();
            if (numeroBatedorPenaltiIA >= getJogadoresPorTime()) {
                numeroBatedorPenaltiIA = 0;
                setNumeroBatedorIA(0);
            }

            Equipe equipeDaIA = getEquipeAdversaria();
            BatedorDePenalti bp = equipeDaIA.getTecnico().escolherBatedor(numeroBatedorPenaltiIA);

            gerarRelatorio(bp, equipeDaIA);
            setNumeroBatedorIA(numeroBatedorPenaltiIA + 1);
            verificarPlacar(equipeDaIA);
            btnSuaVez.setEnabled(!haVencedor);
        });
        t.setRepeats(false);
        t.start();
    }

    public int getPenaltisBatidos() {
        return penaltisBatidos;
    }

    public void setPenaltisBatidos(int penaltisBatidos) {
        this.penaltisBatidos = penaltisBatidos;
    }

    private void naoHaVencedor(Equipe ultimaEquipeQueBateu) {
        if (ultimaEquipeQueBateu.equals(getTecnico().getEquipe())) {
            btnSuaVez.setEnabled(false);
        } else {
            btnSuaVez.setEnabled(true);
        }
        haVencedor = false;
    }
}
